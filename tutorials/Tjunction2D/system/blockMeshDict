/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  9
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       dictionary;
    object      blockMeshDict;
}
/*---------------------------------------------------------------------------*\
            |--- l_up --|-- w_inj --|-- l_down ---|
            _______________________________________                 _
            |           |           |             |                 |                     
inletVessel |     0     |     1     |      2      | outletVessel   w_ves
            |           |           |             |                 |
            |___________| _ _ _ _ _ |_____________|                 _      _
                        |           |                               |      |
            injuryWalls-|     3     |-injuryWalls                  l_se    |   
                        |           |                               |      |
                        | _ _ _ _ _ |                               _     l_ext
                        |           |                               |      |
                        |     4     |                            l_extout  |
            |           |           |                               |      |
         (0,0,0)-       |___________|                               _      _
           /              outletExt
            
            | ---- l_inj_right ---- |
\*---------------------------------------------------------------------------*/


convertToMeters 1.0; // Not really meters -- length unit = mm

#include "$FOAM_CASE/constant/inputParameters"

// Other length calculations
l_inj_right #calc "$l_up + $w_inj";
H #calc "$l_ext + $w_ves"; // Total height of T

vertices
(
    (0 $l_ext 0) //v0 
    ($l_up $l_ext 0) //v1
    ($l_inj_right $l_ext 0) //v2
    ($l_ves $l_ext 0) //v3
    (0 $H 0) //v4 
    ($l_up $H 0) //v5
    ($l_inj_right $H 0) //v6
    ($l_ves $H 0) //v7

    ($l_up $l_extout 0) //v8
    ($l_inj_right $l_extout 0) //v9
    ($l_up 0 0) //v10
    ($l_inj_right 0 0) //v11

    (0 $l_ext $Zdir) //v12
    ($l_up $l_ext $Zdir) //v13
    ($l_inj_right $l_ext $Zdir) //v14
    ($l_ves $l_ext $Zdir) //v15

    ($l_ves $H $Zdir) //v16
    ($l_inj_right $H $Zdir) //v17
    ($l_up $H $Zdir) //v18
    (0 $H $Zdir) //v19

    ($l_up $l_extout $Zdir) //v20
    ($l_inj_right $l_extout $Zdir) //v21
    ($l_up 0 $Zdir) //v22
    ($l_inj_right 0 $Zdir) //v23

);

blocks
(
    //blk0 
    hex (0 1 5 4 12 13 18 19) ($Nx_up $Ny_ves $Nz) simpleGrading ($Rx_up $Ry_ves 1) 
    
    //blk1
    hex (1 2 6 5 13 14 17 18) ($Nx_inj $Ny_ves $Nz) simpleGrading ($Rx_inj $Ry_ves 1) 
    
    //blk2
    hex (2 3 7 6 14 15 16 17) ($Nx_down $Ny_ves $Nz) simpleGrading ($Rx_down $Ry_ves 1) 
    
    //blk3    
    hex (8 9 2 1 20 21 14 13) ($Nx_inj $Ny_se $Nz) simpleGrading ($Rx_inj $Ry_se 1) 
    
    //blk4     
    hex (10 11 9 8 22 23 21 20) ($Nx_inj $Ny_ext $Nz) simpleGrading ($Rx_inj $Ry_ext 1) 
);

edges
(
);

boundary
(
    inletVessel
    {
        type patch;
        faces
        (
            (0 12 19 4)
        );
    }

    outletVessel
    {
        type patch;
        faces
        (
	    (3 15 16 7)
        );
    }

    outletExt
    {
        type patch;
        faces
        (
	    (10 11 23 22)
        );
    }

    injuryWalls
    {
        type patch;
        faces
        (
            (8 20 13 1)
            (9 21 14 2)
        );
    }

    fixedWalls
    {
        type wall;
        faces
        (
            // block 0
            (0 12 13 1)
            (4 19 18 5)
            
            // block 1
            (5 18 17 6)
            
            // block 2
            (6 17 16 7)
            (2 14 15 3)
            
            // block 3 walls are the injuryWalls

            // block 4
            (10 22 20 8)
            (11 23 21 9)
        );
    }
    frontAndBack
    {
        type empty;
        faces
        (
            (0 1 5 4)
            (12 13 18 19)

            (1 2 6 5)
            (13 14 17 18)

            (2 3 7 6)
            (14 15 16 17)

            (8 9 2 1)
            (20 21 14 13)

            (10 11 9 8)
            (22 23 21 20)
        );
    }
);

mergePatchPairs
(
);

// ************************************************************************* //
