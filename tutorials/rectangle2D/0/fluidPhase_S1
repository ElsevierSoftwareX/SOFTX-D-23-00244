/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  9
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       volScalarField;
    object      fluidPhase_S1;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#include "$FOAM_CASE/constant/inputParameters"

dimensions      [0 -3 0 0 1 0 0];

internalField   uniform 0;

boundaryField
{
    inletVessel
    {
        type         uniformFixedValue;
        uniformValue
        {
            type             scale;
            scale            linearRamp;
            start            $t0_chem;
            duration         $tf_chem;
            value            $S1_IC;
        }
    }
    
    outletVessel
    {
        type            zeroGradient;
    }

    fixedWalls
    {
        type            zeroGradient;
    }
    
    injuryWalls
    {
        type            codedMixed;
        refValue        uniform 0.0;
        refGradient     uniform 0.0;
        valueFraction   uniform 0.0;

        name            robinBC_S1;
        code
        #{
            /* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * *\
            Coag model requires Robin BC of form:
                    -D d/dn(field) = K * field + F
            which can be written as: 
                    d/dn(field) = -1/D * (K * field + F)

            For use with codedMixed set: 
                this->refValue() = 0;
                this->refGrad() = 1/D * (K * field + F) // !no negative in front!
                this->valueFraction() = 0;

            For this field S1, set K = - kC0_on*E0 and F = kC0_off*C0 so that: 
                this->refValue() = 0, this->refGrad() = (K*field + F) / D;
            \* * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * */ 

            // Reference to this field on the face
            scalarField& field = *this;

            // Lookup diffusion rate and kinetic rates 
            const scalar D = readScalar
            (
                db().lookupObject<IOdictionary>
                (
                    "inputParameters"
                ).lookup("Dc")
            );

            const scalar kC0_on = readScalar
            (
                db().lookupObject<IOdictionary>
                (
                    "inputParameters"
                ).lookup("kC0_on")
            );

            const scalar kC0_off = readScalar
            (
                db().lookupObject<IOdictionary>
                (
                    "inputParameters"
                ).lookup("kC0_off")
            );

            // Lookup necessary fields for reaction at boundary
            const scalarField& E0
            (
                patch().lookupPatchField<volScalarField, scalar>("seBound_E0")
            );
            const scalarField& C0
            (
                patch().lookupPatchField<volScalarField, scalar>("seBound_C0")
            );

            scalarField K = -kC0_on * E0;
            scalarField F = kC0_off * C0;

            this->refGrad() = (K*field + F) / D;
            
        #};

    }
    

    frontAndBack
    {
        type            empty;
    }
}

// ************************************************************************* //
