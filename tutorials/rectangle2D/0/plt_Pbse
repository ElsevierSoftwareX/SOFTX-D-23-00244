/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  9
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       volScalarField;
    object      plt_Pbse;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

dimensions      [0 -3 0 0 0 0 0];

// Get length and platelet parameters
#include "$FOAM_CASE/constant/inputParameters"

internalField  #codeStream
    {

        code
        #{
            const IOdictionary& d = static_cast<const IOdictionary&>(dict);
            const fvMesh& mesh = refCast<const fvMesh>(d.db());
            scalarField fld(mesh.nCells(), 0);

            // Number of prebound platelets is x% of Pmax
            const scalar Pb_val = 0.0 * $Pmax;
            
            forAll(mesh.C(),cellI)
            {
            	vector CC = mesh.C()[cellI];
                
                if( CC.y() <= $Pdiam )
            	{
                    // Left side of channel
            	    if(CC.x() >= $l_edge_Adh && CC.x() <= $r_edge_Adh)
                    { 
            	        fld[cellI] = Pb_val;
                    }
                }

            }

            
            writeEntry(os, "", fld);
        #};

        //- Optional:
        codeInclude
        #{
            #include "fvCFD.H"
        #};

        //- Optional:
        codeOptions
        #{
            -I$(LIB_SRC)/finiteVolume/lnInclude  \
            -I$(LIB_SRC)/meshTools/lnInclude \
        #};
    };


boundaryField
{
    inletVessel
    {
        type            zeroGradient;
    }
    
    outletVessel
    {
        type            zeroGradient;
    }
    
    fixedWalls
    {
        type            zeroGradient;
    }
    
    injuryWalls
    {
        type            zeroGradient;
    }
    
    frontAndBack
    {
        type            empty;
    }
}

// ************************************************************************* //
