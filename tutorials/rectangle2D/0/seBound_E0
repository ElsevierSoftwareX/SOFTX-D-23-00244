/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  9
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       volScalarField;
    object      seBound_E0;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#include "$FOAM_CASE/constant/inputParameters"

dimensions      [0 -2 0 0 1 0 0];

internalField   uniform 0;

boundaryField
{
    inletVessel
    {
        type            zeroGradient;
    }
    
    outletVessel
    {
        type            zeroGradient;
    }

    fixedWalls
    {
        type            zeroGradient;
    }
    
    injuryWalls
    {
        type            calculated;
        value           uniform $E0_IC;
    }

 /*
    injuryWalls
    {

        type            codedFixedValue;
        value           uniform 0.0;
	    name  	        TFVIIa_BC;
    
        // This code distributes the initial concentration nonuniformly
        code
        #{

            const vectorField& Cf = patch().Cf();
            scalarField& field = *this;

            // Initial Concentration Value
            const scalar E0_IC = readScalar
            (
                db().lookupObject<IOdictionary>
                (
                    "inputParameters"
                ).lookup("E0_IC")
            );

            // Length of Domain x_max
            const scalar x_max = readScalar
            (
                db().lookupObject<IOdictionary>
                (
                    "inputParameters"
                ).lookup("x_max")
            );

            // Length of injury w_inj
            const scalar w_inj = readScalar
            (
                db().lookupObject<IOdictionary>
                (
                    "inputParameters"
                ).lookup("w_inj")
            );

            scalar inj_left = 0.5 * (x_max - w_inj);
     
            forAll(Cf, faceI) // Loop over all patch faces
            {
                const scalar x = Cf[faceI][0];

                if( x >= inj_left && x <= inj_left + 0.33*w_inj)
                {
                    field[faceI] = E0_IC;
                }

                if( x >= inj_left + 0.66*w_inj && x <= inj_left + w_inj)
                {
                    field[faceI] = E0_IC;
                }
            }
            
        #};
    }
*/    

    frontAndBack
    {
        type            empty;
    }
}

// ************************************************************************* //
