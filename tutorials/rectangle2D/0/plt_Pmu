/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  9
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    format      ascii;
    class       volScalarField;
    object      plt_Pmu;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

#include "$FOAM_CASE/constant/inputParameters"

dimensions      [0 -3 0 0 0 0 0];

internalField   uniform 0;

boundaryField
{
    inletVessel
    {
        type            codedFixedValue;
        value           uniform 0;
        name            Pmu_nearWallProfile;

        code
        #{
            // Near-wall excess platelet profile motivated by Eckstein '91
            // Pmu = Plt_0 * C0 * s(y), 
            // where s(y) = 1 + K*R(y)^18 * (1 - R), 
            //       R(y) = abs(y - r) / r, 
            //          r = radius of vessel,
            //       1/C0 = 1 / d * integral(s(y) dy),
            //          d = diamter of vessel
            //          K : determines amplitude of shape
            // Use with shear rates of 500, 1000, 1500 1/s.
            // Note that K = 0 provides a uniform profile

            //using namespace std;
            const vectorField& Cf = patch().Cf();  // mesh values
            //scalarField& field = *this; // field at boundary
            int n =  patch().size(); // num elements on boundary
            scalarField s(patch().size(),0.0);  // for storing the shape function 
            scalar h [n] = {}; // for integration

            // Normal concentration of platelets at inlet  
            const scalar Plt_0
                = readScalar
                    (
                        db().lookupObject<IOdictionary>
                        (
                            "inputParameters"
                        ).lookup("Plt_0")
                    );
            
            // wall shear rate inverse seconds
            const scalar shr_rt = readScalar
            (
                db().lookupObject<IOdictionary>
                (
                    "inputParameters"
                ).lookup("inletShearRate")
            );

            // Height of the vessel (may need to change for other domains)
            const scalar y_max
                = readScalar
                    (
                        db().lookupObject<IOdictionary>
                        (
                            "inputParameters"
                        ).lookup("y_max")
                    );

            // Determine scale K for shape function (amplitude near wall)
            scalar K = 0.; // K = 0 provides uniform profile
            if ( mag(shr_rt - 500.) < 1.e-10 ) // shr_rt = 500 1/s
            {
                K = 202.; // -> Peak-to-centre ratio ~5
            }
            else if ( mag(shr_rt - 1000.) < 1.e-10 ) // shr_rt = 1000 1/s
            {
                K = 330.; // -> Peak-to-centre ratio ~7.5
            }
            else if ( mag(shr_rt - 1500.) < 1.e-10) // shr_rt = 500 1/s
            {
                K = 455.; // -> Peak-to-centre ratio ~10
            }
            else
            {
                Info << "Shear Rate not defined for platelet margination function" << exit(FatalError);
            }

            // Get initial shape of profile
            scalar r = y_max/2.; // vessel radius (may need to change for other domains)
            scalar y_prev = 0; // previous y-val for dy calcs
            // int i = 0;
            forAll(Cf,faceI)
            {
                scalar y = Cf[faceI][1];
                scalar R = std::abs(y - r) / r;
                // Initial shape (not scaled correctly yet)
                s[faceI] = 1. + K * pow( R, 18) * (1 - R);
                h[faceI] = y - y_prev;
                y_prev = y;
                // i = i+1; 
            }

            // Integrate the profile with trapezoid rule
            scalar intgrl_s = 0;
            for(int k = 0; k < n-1; k++)
            {
                intgrl_s = intgrl_s + 0.5 * h[k+1] * ( s[k] + s[k+1] );
            }

            // Set the field values at the inlet
            scalar C0 = y_max/intgrl_s;
            operator == (Plt_0 * C0 * s); 

            /*
            // check that the integral of the profile = integral Plt_0
            scalar intconst = Plt_0 * y_max;
            scalar intgrl_srofile = 0;
            for(int k = 0; k < n-1; k++)
            {
                intgrl_profile = intgrl_profile + 0.5 * h[k+1] * Plt_0 * C0(s[k]+s[k+1]);
            }
            Info << "intconst = " << intconst << endl;
            Info << "intgrl_profile = " << intgrl_srofile << endl;
            */

        #};
    }
    
    outletVessel
    {
        type            zeroGradient;
    }

    fixedWalls
    {
        type            zeroGradient;
    }
    
    injuryWalls
    {
        type            zeroGradient;
    }
    
    frontAndBack
    {
        type            empty;
    }
}

// ************************************************************************* //
